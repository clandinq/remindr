{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 HelveticaNeue-Bold;}
{\colortbl;\red255\green255\blue255;\red14\green14\blue14;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c6667\c6667\c6667;\cssrgb\c100000\c100000\c100000\c60000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww14200\viewh9560\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\ls1\ilvl0
\f0\fs32 \cf2 \cb3 - Poner las cosas de BCBL\
- Poner que northwestern immediate care est\'e1 incluido. Pueden ir a CVS.\
\
For modifying parameters:\
1. Ask for username and project name\
2. List out parameters\
3. Ask for new parameters (copy previous code)\
4. Submit (on submission, override previous parameters)\
\
For modifying reminders:\
1. Ask for username and project name\
2. Show data frame\
3. Submit changes. \
\
- Check if user and project exist. If they don't, query for user and project. \
- Extract for each reminder type the parameters. E.g., future conferences: "you have set up reminders 30,60 and 90 days before predicted conference deadlines."\
\
- Send email notifying of set up.\
\
\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 {\listtext	\uc0\u8226 	}\
{\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 To make the reminder system work for multiple users and projects, you will need to modify the data structure and the logic of the script. For example, you could add a column in the CSV file that indicates the user and the project name for each reminder. Then, you could filter the data by user and project before sending the email. Alternatively, you could create separate CSV files for each user and project, and loop over them in the script.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 To make the reminder system run on a server, you will need to deploy your R script and your data files to a web hosting service that supports R. You will also need to schedule your script to run periodically using a tool like\'a0
\f1\b cron
\f0\b0 \'a0or\'a0
\f1\b taskscheduleR
\f0\b0 . You will also need to set up your email credentials and authentication on the server. You can find some tutorials on how to do this online, such as this one: https://www.r-bloggers.com/2016/11/how-to-self-host-shiny-apps/\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 To make the reminder system more user-friendly and interactive, you could consider creating a web interface for it using a framework like\'a0
\f1\b shiny
\f0\b0 \'a0or\'a0
\f1\b flexdashboard
\f0\b0 . This would allow users to create, edit and delete reminders from a browser, without having to edit the CSV file manually. You could also add some features like notifications, calendars, charts or graphs to visualize the reminders.\cb1 \
}